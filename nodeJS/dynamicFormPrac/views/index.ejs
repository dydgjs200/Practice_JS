<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dynamic Form</title>

    <!-- Ajax 사용을 위한 jQuery CDN -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>

    <script
      src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"
      integrity="sha256-lSjKY0/srUM9BE3dPm+c4fBo1dky2v27Gdjm2uoZaL0="
      crossorigin="anonymous"
    ></script>

    <!-- Axios CDN -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <style>
      div.result {
        font-size: 24px;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <h1>동적 폼 전송 연습하기</h1>

    <!-- 이름, 성별(라디오버튼)을 입력받는 폼 -->
    <form name="register">
      <label for="name">이름</label>
      <input type="text" name="name2" id="name" required />

      <br />

      성별
      <input type="radio" name="gender" value="m" id="male" required />
      <label for="male">남</label>
      <input type="radio" name="gender" value="w" id="woman" />
      <label for="woman">여</label>

      <br /><br />

      <button type="button" onclick="ajaxGet()">Ajax Get 제출</button>
      <button type="button" onclick="ajaxPost()">Ajax Post 제출</button>
      <br /><br />
      <button type="button" onclick="axiosGet()">Axios Get 제출</button>
      <button type="button" onclick="axiosPost()">Axios Post 제출</button>

      <br /><br />
      <button type="button" onclick="fetchGet()">fetchGet 제출</button>

      <br /><br /><br />
      <hr />

      <!-- 동적 폼 전송 결과를 보여줄 곳 -->
      <div class="result"></div>
    </form>

    <form name="assignment">
      <label for="name">이름</label>
      <input type="text" name="nameAss" />
      <label for="password">패스워드</label>
      <input type="password" name="password" />
      <button type="button" value="회원가입" onclick="assign()">
        회원가입
      </button>
    </form>

    <div class="ass_box"></div>
    <div class="isLogin"></div>

    <script>
      //result 객체
      const resultBox = document.querySelector(".result");

      function ajaxGet() {
        const form = document.forms["register"];

        // 폼 요소 확인
        console.log(form);
        console.log(form.name);
        console.log(form.name2);
        console.log(form.gender);

        // 폼 value 가져오기
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // Ajax로 서버에 Get 요청 보내기
        $.ajax({
          type: "get", //요청 종류(=form method)
          url: "/ajax", //요청 경로(=form action)
          data: data, //요청 보낼 데이터(서버가 받게 될 값)
          success: function (data) {
            //요청이 성공적 수행됐을 때 실행함수
            console.log(data);
            resultBox.textContent = `Get Ajax 요청. ${data.name}님은 ${data.gender} 이군요`;
          },
        });
      }

      function ajaxPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        $.ajax({
          type: "post",
          url: "/ajax",
          data: data,
          success: function (data) {
            resultBox.textContent = `post 요청 완료 ${data.name}, ${data.gender}`;
          },
        });
      }

      // function axiosGet() {
      //   const form = document.forms["register"];
      //   const data = {
      //     name: form.name.value,
      //     gender: form.gender.value,
      //   };

      // // 데이터 validate 메소드 -> radio의 name이 같다면 하나만 선택되더라도 true 반환
      // console.log(form.name.checkValidity());
      // console.log(form.gender[0].checkValidity()); //radio의 남자 속성
      // console.log(form.gender[1].checkValidity()); //radio의 여자 속성

      // axios 요청결과는 promise 객체 -> then, catch를 통한 channing -> async await 도 가능.
      // axios({
      //   method: "get",
      //   url: "/axios",
      //   params: data,
      // })
      //   .then((response) => {
      //     // 성공 시 실행 -> ajax의 success랑 비슷
      //     console.log(response);
      //     console.log(response.data);

      //     resultBox.textContent = `Get Axios ${data.name}, ${data.gender}`;
      //   })
      //   .catch((error) => {
      //     console.log(error);
      //   });

      // get일 경우 쿼리스트링으로도 작성 가능함 -> axios의 url 수정
      // axios({
      //   url: `/axios?name=${data.name}&gender=${data.gender}`
      // })

      // async await + try catch를 이용한 예외처리

      //   try {
      //     axios({
      //       method: "get",
      //       url: "/axios",
      //       params: data,
      //     });
      //     let nameVal = form.name.checkValidity();
      //     let genderVal = form.gender[0].checkValidity();
      //     if (!(nameVal && genderVal)) {
      //       throw new Error(nameVal === true ? "성별 입력" : "이름 입력");
      //     }

      //     resultBox.textContent = `Get Axios ${data.name}, ${data.gender}`;
      //   } catch (error) {
      //     resultBox.textContent = error;
      //   }
      // }

      async function axiosGet() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          if (!form.name.checkValidity()) {
            resultBox.textContent = "이름 입력";
          } else if (!form.gender[0].checkValidity()) {
            resultBox.textContent = "성별입력";
          } else {
            // res를 axios가 만들어진 이후에 await로 담음
            const res = await axios({
              method: "get",
              url: "/axios",
              params: data,
            });
            console.log(res);
            const { name, gender } = res.data;

            resultBox.textContent = `${name}, ${gender}`;
          }
        } catch (error) {
          console.log(error);
        }
      }
      function axiosPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        axios({
          method: "post",
          url: "/axios",
          // post이므로 data 속성으로 보내야함.(params가 아님)
          data: data,
        }).then((res) => {
          console.log(res);
        });
      }

      function fetchGet() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // headers = json 포맷 사용선언 , body는 내용
        fetch(`/fetch?name=${data.name}&gender=${data.gender}`, {
          method: "get",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data), // data 객체를 JSON형태로 변환
        })
          .then((res) => {
            console.log(res);
            return res.json();
          })
          .then((data) => {
            console.log(data);
          });
      }

      // app에서 받아온 id, pw
      const appId = "<%= data.id%>";
      const appPw = "<%= data.password%>";

      function assign() {
        const form2 = document.forms["assignment"];
        const box = document.querySelector(".ass_box");
        const isLogin = document.querySelector(".isLogin");

        const data = {
          name: form2.nameAss.value,
          password: form2.password.value,
        };

        console.log(data);

        axios({
          method: "post",
          url: "/Assignment_Ajax",
          data: data,
        }).then((res) => {
          box.textContent = `${data.name} , ${data.password}`;
          if (appId == data.name && appPw == data.password) {
            box.style.color = "blue";
          } else {
            box.style.color = "red";
          }
        });
      }
    </script>
  </body>
</html>
